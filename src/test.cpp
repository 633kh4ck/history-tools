// copyright defined in LICENSE.txt

#include <eosiolib/action.hpp>
#include <eosiolib/asset.hpp>
#include <eosiolib/datastream.hpp>
#include <eosiolib/varint.hpp>
#include <memory>
#include <string>
#include <vector>

#define ripemd160 internal_ripemd160
#include "../external/abieos/src/ripemd160.hpp"
#undef ripemd160

using namespace eosio;
using namespace std;

const unsigned char foo[] = {
    0x10, 0x42, 0xc8, 0x58, 0xe5, 0x49, 0x7b, 0x3e, 0x00, 0x00, 0x00, 0x00, 0xa8, 0xed, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x80, 0xab,
    0x26, 0xa7, 0x01, 0x00, 0x00, 0x00, 0x43, 0x00, 0x02, 0x05, 0x80, 0xd8, 0x46, 0x09, 0x0c, 0xbe, 0x71, 0x72, 0x36, 0x71, 0xcd, 0xc4,
    0xef, 0x7b, 0xfe, 0x96, 0x49, 0x47, 0xa6, 0x83, 0xbf, 0xe0, 0x5e, 0xb9, 0x6d, 0x90, 0x05, 0xc9, 0xb1, 0xf2, 0x2f, 0x01, 0x00, 0x00,
    0x02, 0x09, 0x3a, 0x46, 0xe3, 0xdb, 0x9f, 0xd8, 0x99, 0x22, 0x21, 0xc4, 0xff, 0x53, 0x9d, 0x23, 0x96, 0x36, 0xe2, 0x57, 0x5f, 0x93,
    0xf7, 0x41, 0x8d, 0x9a, 0x72, 0xbc, 0xf6, 0x44, 0x49, 0xdb, 0x76, 0x01, 0x00, 0x00, 0x02, 0x15, 0xa3, 0xf0, 0xc9, 0x98, 0x50, 0x64,
    0xb0, 0x70, 0x91, 0x21, 0xbe, 0xdf, 0x2e, 0xf4, 0x68, 0xe4, 0x07, 0xf5, 0xdd, 0xf5, 0x75, 0x2f, 0x60, 0xa6, 0x1c, 0xdf, 0x26, 0xbe,
    0x73, 0x5b, 0x1c, 0x01, 0x00, 0x00, 0x02, 0x1c, 0x2b, 0xaf, 0x23, 0x33, 0x8c, 0xb2, 0x9c, 0x84, 0x1b, 0x08, 0x73, 0x94, 0x8d, 0x3c,
    0xdf, 0x1a, 0x86, 0xe9, 0x4e, 0x7a, 0x7f, 0x8f, 0x8a, 0xf8, 0x18, 0x59, 0x1d, 0x13, 0x91, 0x0f, 0xf4, 0x01, 0x00, 0x00, 0x02, 0x2c,
    0xb5, 0x87, 0x68, 0x63, 0x33, 0x10, 0xaf, 0x22, 0xc4, 0x3d, 0x24, 0x1b, 0x37, 0x4b, 0x34, 0x54, 0xd2, 0x3d, 0x10, 0x96, 0x5f, 0xb2,
    0x23, 0x2f, 0xfe, 0xba, 0xb0, 0x9f, 0x70, 0x91, 0x50, 0x01, 0x00, 0x00, 0x02, 0x31, 0xd4, 0x82, 0xfe, 0xeb, 0x49, 0x94, 0xb1, 0x92,
    0x98, 0xd8, 0xf4, 0xf4, 0x06, 0xc6, 0x36, 0x52, 0x54, 0xab, 0x4b, 0xf8, 0xf9, 0x0c, 0xcd, 0xe6, 0x12, 0x05, 0xb9, 0xb5, 0x09, 0xaa,
    0x94, 0x01, 0x00, 0x00, 0x02, 0x35, 0x8b, 0xd5, 0xcd, 0x49, 0x6e, 0x85, 0xc1, 0x17, 0x73, 0x4d, 0xbc, 0xfa, 0x48, 0xd8, 0xfd, 0xf0,
    0xe0, 0xe5, 0xc3, 0x99, 0xd2, 0x60, 0x52, 0xe0, 0x11, 0xbe, 0x4e, 0x87, 0x0e, 0xe2, 0x03, 0x01, 0x00, 0x00, 0x02, 0x39, 0xfd, 0xc1,
    0x4e, 0x03, 0x28, 0xac, 0xa8, 0x0d, 0x7e, 0xeb, 0x0b, 0x16, 0x52, 0xc0, 0x5c, 0x50, 0x95, 0xe1, 0x47, 0xab, 0x47, 0xad, 0xb9, 0x8c,
    0x42, 0xa2, 0x6b, 0x91, 0xb1, 0x79, 0xeb, 0x01, 0x00, 0x00, 0x02, 0x3b, 0x8a, 0x64, 0x93, 0x52, 0xfb, 0x6f, 0x78, 0x7d, 0xf0, 0x75,
    0x4e, 0xb8, 0x03, 0x33, 0x1c, 0x19, 0x85, 0x0e, 0x71, 0xbe, 0x27, 0xba, 0x80, 0xa5, 0x6f, 0xf1, 0x73, 0x49, 0x6b, 0xd0, 0x00, 0x01,
    0x00, 0x00, 0x02, 0x42, 0x69, 0x72, 0xe0, 0xf8, 0x99, 0x6a, 0xc2, 0x35, 0xaf, 0x0a, 0xe3, 0x02, 0xc4, 0xd3, 0x7c, 0xbd, 0xe0, 0x9a,
    0xff, 0x39, 0xc4, 0x57, 0x53, 0x3e, 0x61, 0xd1, 0x3f, 0x3a, 0x16, 0xdf, 0x5a, 0x01, 0x00, 0x00, 0x02, 0x4c, 0x7b, 0xe5, 0x3c, 0x98,
    0xc2, 0xaf, 0xde, 0x85, 0x94, 0xdf, 0x30, 0xd6, 0x68, 0x50, 0x72, 0x07, 0xe7, 0xad, 0x69, 0xa0, 0xa7, 0x7a, 0x8b, 0x19, 0x96, 0x6d,
    0x89, 0xe6, 0x6a, 0x1a, 0x1e, 0x01, 0x00, 0x00, 0x02, 0x4c, 0x7f, 0x9f, 0x99, 0x1a, 0x64, 0x09, 0xcc, 0xa1, 0xc5, 0x08, 0x0c, 0x0d,
    0xb4, 0x3b, 0x77, 0xd9, 0xa7, 0x6e, 0xe1, 0xaf, 0x37, 0x62, 0x71, 0x0b, 0xd0, 0x72, 0x92, 0x9b, 0x8e, 0xb0, 0x33, 0x01, 0x00, 0x00,
    0x02, 0x63, 0x26, 0x63, 0xef, 0x84, 0x50, 0x87, 0x6e, 0x00, 0x80, 0xcc, 0x91, 0x59, 0x88, 0x44, 0xb9, 0x2f, 0x73, 0x4a, 0x01, 0x6c,
    0x1e, 0x02, 0x12, 0x3f, 0x3a, 0x29, 0xe8, 0x0e, 0xcf, 0x48, 0x43, 0x01, 0x00, 0x00, 0x02, 0x77, 0x37, 0x6d, 0x68, 0x7d, 0x67, 0x0c,
    0xc9, 0x32, 0x08, 0xbb, 0xbb, 0x00, 0xa0, 0x77, 0x53, 0x32, 0xeb, 0xb5, 0x26, 0x32, 0xb5, 0xb0, 0xf5, 0xd1, 0xd3, 0x31, 0x07, 0x0c,
    0x04, 0xab, 0x81, 0x01, 0x00, 0x00, 0x02, 0x7a, 0x7a, 0xff, 0x79, 0x85, 0xbf, 0x85, 0xaf, 0xcb, 0xa9, 0xaa, 0x34, 0x5a, 0xdc, 0xad,
    0x34, 0x7a, 0x30, 0xaa, 0xe0, 0xcc, 0x3d, 0x50, 0x93, 0xc3, 0x91, 0x68, 0xac, 0x34, 0xdd, 0x07, 0x2b, 0x01, 0x00, 0x00, 0x02, 0x7e,
    0xdc, 0xc8, 0x9a, 0x73, 0x26, 0x7c, 0x8c, 0x00, 0x87, 0x98, 0x50, 0x03, 0xa2, 0x47, 0x62, 0xe5, 0x13, 0xdb, 0x4a, 0x37, 0x07, 0xde,
    0xb1, 0x0f, 0xd9, 0xc9, 0xba, 0x3e, 0x7d, 0xf1, 0x49, 0x01, 0x00, 0x00, 0x02, 0x99, 0x35, 0xc4, 0x5c, 0xa0, 0xa7, 0x03, 0xc4, 0x57,
    0x1d, 0x99, 0x94, 0x26, 0xa1, 0xa7, 0x9d, 0xad, 0x2a, 0xe6, 0x2d, 0x26, 0x10, 0xe7, 0xa0, 0x26, 0xa3, 0x36, 0x3f, 0xf5, 0xe2, 0x99,
    0x14, 0x01, 0x00, 0x00, 0x02, 0x9b, 0xbd, 0xaf, 0xd1, 0x81, 0x53, 0x23, 0xe0, 0x32, 0x45, 0xef, 0x0b, 0xe9, 0x7a, 0x19, 0xb3, 0xd1,
    0xc9, 0xf0, 0x05, 0xd5, 0x5a, 0x60, 0x46, 0x4f, 0xeb, 0xda, 0x8c, 0x62, 0x80, 0xe3, 0x68, 0x01, 0x00, 0x00, 0x02, 0xa1, 0x08, 0xdd,
    0x25, 0x3d, 0x71, 0x44, 0x3e, 0xa6, 0xfb, 0xb7, 0x95, 0x31, 0x31, 0xa5, 0xf0, 0x47, 0x9e, 0x05, 0xec, 0x0b, 0x2b, 0xdb, 0x33, 0x41,
    0xe0, 0x97, 0xb8, 0x4b, 0xc0, 0x47, 0x39, 0x01, 0x00, 0x00, 0x02, 0xb0, 0xc4, 0x75, 0xf7, 0x18, 0xa1, 0xa2, 0xfc, 0xee, 0x96, 0xa1,
    0x57, 0xa9, 0xd8, 0xa3, 0x0d, 0x79, 0x1b, 0xb7, 0xc4, 0x7f, 0x44, 0x4d, 0xb4, 0xf9, 0x75, 0x3d, 0x88, 0xa4, 0x85, 0xfe, 0x2d, 0x01,
    0x00, 0x00, 0x02, 0xb4, 0xa1, 0xd6, 0x82, 0xc1, 0xf4, 0xb8, 0x48, 0x94, 0x1c, 0x09, 0xea, 0xde, 0x05, 0xf3, 0x5c, 0x6f, 0x11, 0x99,
    0x28, 0xc7, 0x9d, 0xff, 0x8f, 0xad, 0x20, 0xbe, 0xd2, 0xda, 0xa7, 0x0e, 0x66, 0x01, 0x00, 0x00, 0x02, 0xc0, 0x0e, 0x34, 0xb6, 0xb8,
    0x5d, 0xe9, 0x45, 0xbb, 0x43, 0x36, 0x77, 0xac, 0x7b, 0xc9, 0xe5, 0x31, 0xa0, 0xd7, 0x89, 0x05, 0xa4, 0x24, 0x70, 0x07, 0xa2, 0x9f,
    0x6c, 0xe2, 0xfd, 0x78, 0x8a, 0x01, 0x00, 0x00, 0x02, 0xc9, 0xce, 0xa5, 0x41, 0x62, 0x9e, 0x53, 0x30, 0x34, 0xa1, 0x58, 0x9d, 0x6b,
    0x1c, 0xa4, 0xd2, 0x77, 0x7d, 0xf7, 0xe3, 0x07, 0x01, 0x11, 0xa0, 0x72, 0x6d, 0xc0, 0x90, 0xe1, 0xb4, 0x07, 0xdb, 0x01, 0x00, 0x00,
    0x02, 0xcf, 0x08, 0xc4, 0x6a, 0x2a, 0x6a, 0xbf, 0xbd, 0xda, 0xb5, 0x28, 0x28, 0xf5, 0x3d, 0x30, 0x3a, 0xe8, 0x6a, 0x0e, 0xbf, 0xab,
    0x20, 0xdb, 0x4e, 0x2a, 0xd0, 0xf1, 0x6e, 0x5e, 0x1a, 0x83, 0x66, 0x01, 0x00, 0x00, 0x02, 0xcf, 0x56, 0x61, 0x94, 0x76, 0x79, 0xbf,
    0x38, 0xc1, 0x56, 0xbd, 0xad, 0x7b, 0xaa, 0x88, 0x88, 0x17, 0x28, 0xdd, 0x9c, 0x4a, 0x72, 0x2a, 0xb8, 0x49, 0x7f, 0x6d, 0xeb, 0x45,
    0xa7, 0x94, 0x8d, 0x01, 0x00, 0x00, 0x02, 0xec, 0xc6, 0xd7, 0x99, 0xac, 0xc0, 0xfc, 0xe1, 0xdd, 0xb5, 0x01, 0xf7, 0x12, 0x07, 0x2c,
    0x05, 0x9e, 0x23, 0xcf, 0xfd, 0x60, 0x1a, 0x8c, 0x9e, 0x82, 0x4d, 0x04, 0xe2, 0xf6, 0xf3, 0xf2, 0xa3, 0x01, 0x00, 0x00, 0x02, 0xed,
    0x62, 0x11, 0x2d, 0x8c, 0x81, 0xb7, 0x9d, 0x08, 0x07, 0x90, 0xb2, 0x39, 0x69, 0xc5, 0x7f, 0xe3, 0xd2, 0x77, 0x05, 0xc6, 0x94, 0xb9,
    0xe5, 0x46, 0xdb, 0x2e, 0xd7, 0x50, 0x31, 0x0d, 0x36, 0x01, 0x00, 0x00, 0x02, 0xf3, 0x73, 0x00, 0xe0, 0xf2, 0x24, 0x17, 0xb0, 0x37,
    0x60, 0xb4, 0x28, 0x58, 0x6d, 0xc9, 0x4d, 0x73, 0x82, 0xee, 0x45, 0x80, 0x4d, 0xfa, 0x85, 0x60, 0x07, 0x0e, 0x53, 0x0d, 0xe1, 0xe3,
    0xfe, 0x01, 0x00, 0x00, 0x02, 0xf7, 0x01, 0x51, 0xc2, 0x91, 0xef, 0xcf, 0x2f, 0x4c, 0xd1, 0x4a, 0xcc, 0x0e, 0xf1, 0x10, 0x11, 0x1e,
    0x7b, 0xaf, 0x15, 0x30, 0xcb, 0x73, 0x64, 0xf9, 0x76, 0xd8, 0x57, 0x8e, 0x44, 0x81, 0x40, 0x01, 0x00, 0x00, 0x02, 0xf8, 0x1c, 0x92,
    0x8a, 0xfb, 0x93, 0x53, 0x55, 0x9b, 0x91, 0x18, 0xa1, 0x52, 0xb0, 0x20, 0x32, 0x5d, 0xfd, 0x22, 0x30, 0xe8, 0xac, 0x52, 0x91, 0x12,
    0x80, 0x76, 0x18, 0x7e, 0x57, 0xe2, 0xd7, 0x01, 0x00, 0x00, 0x02, 0xf8, 0xfc, 0x2f, 0xf3, 0xb9, 0x75, 0xe9, 0x9e, 0x45, 0x3f, 0xd0,
    0xf9, 0x1c, 0x2e, 0x4d, 0xb9, 0xf2, 0xdc, 0x19, 0x8a, 0xfe, 0x3a, 0xe2, 0x7f, 0x53, 0x5a, 0xf8, 0xf2, 0x89, 0x53, 0xd8, 0xd0, 0x01,
    0x00, 0x00, 0x02, 0xfc, 0x1a, 0x79, 0x55, 0xd4, 0x98, 0x87, 0x2f, 0xac, 0xb6, 0x37, 0x4e, 0x95, 0x07, 0xb7, 0x32, 0x36, 0xbf, 0x9a,
    0x60, 0x66, 0xe7, 0x66, 0xee, 0x05, 0x13, 0x23, 0xea, 0xc3, 0xd0, 0x93, 0xa7, 0x01, 0x00, 0x00, 0x03, 0x05, 0x95, 0x6d, 0x3c, 0x02,
    0x0b, 0x3a, 0x0b, 0x79, 0xa2, 0xea, 0xa9, 0x81, 0xbf, 0xba, 0xc2, 0xcb, 0x49, 0x2b, 0xb2, 0x38, 0x22, 0x40, 0x69, 0xcf, 0x56, 0x3a,
    0x73, 0xa3, 0xd7, 0x4b, 0x26, 0x01, 0x00, 0x00, 0x03, 0x14, 0x53, 0xef, 0xeb, 0xa2, 0x61, 0xc5, 0x24, 0x06, 0x03, 0xbb, 0x0f, 0x8e,
    0xca, 0xe0, 0x1d, 0xaa, 0x4e, 0x7d, 0xd8, 0x9b, 0xcc, 0x2f, 0x5e, 0x24, 0x6e, 0xf5, 0x64, 0x21, 0x1f, 0x1a, 0x95, 0x01, 0x00, 0x00,
    0x03, 0x17, 0xfc, 0xd3, 0xc1, 0x4f, 0xfe, 0x44, 0x8e, 0x8c, 0xdf, 0x5e, 0x1f, 0x06, 0x75, 0xbc, 0x19, 0x43, 0xc8, 0x94, 0x82, 0x08,
    0x7f, 0xb4, 0x68, 0x16, 0xcd, 0xb5, 0x8c, 0xcc, 0xbc, 0xae, 0x8c, 0x01, 0x00, 0x00, 0x03, 0x19, 0xfc, 0x9f, 0xba, 0xb0, 0xa5, 0xea,
    0xc4, 0xc7, 0x32, 0xaa, 0xb1, 0x13, 0xb0, 0x6d, 0x8d, 0x89, 0x37, 0xce, 0x53, 0x72, 0xef, 0xd8, 0x45, 0x60, 0xa4, 0x8b, 0x8c, 0xf8,
    0x1f, 0xcc, 0x5a, 0x01, 0x00, 0x00, 0x03, 0x1b, 0xdc, 0x6f, 0xf5, 0xb1, 0x9b, 0xc9, 0xbe, 0x21, 0x30, 0xc4, 0x16, 0x87, 0x71, 0xcb,
    0xf0, 0x4f, 0x31, 0x4d, 0x46, 0x61, 0x8b, 0xa1, 0x86, 0xbf, 0xe4, 0xe5, 0xac, 0x37, 0x08, 0x63, 0xfa, 0x01, 0x00, 0x00, 0x03, 0x1f,
    0xf5, 0xb1, 0x33, 0x56, 0xb1, 0x18, 0xc5, 0xe9, 0x01, 0xa5, 0x7a, 0x07, 0xa6, 0x5a, 0xeb, 0x86, 0x55, 0x0b, 0xad, 0xba, 0xdc, 0xfa,
    0xd8, 0x79, 0x2e, 0x04, 0x6c, 0x55, 0x82, 0x2e, 0xaf, 0x01, 0x00, 0x00, 0x03, 0x33, 0x27, 0xb3, 0x4d, 0xcd, 0xe2, 0x56, 0xd8, 0x3c,
    0xa0, 0x55, 0xdb, 0xd8, 0x72, 0xe8, 0xc3, 0x56, 0x25, 0xc4, 0x0f, 0x5d, 0xa6, 0xa2, 0x48, 0x69, 0x99, 0x83, 0x15, 0x18, 0x26, 0xb3,
    0xea, 0x01, 0x00, 0x00, 0x03, 0x4c, 0xff, 0x9d, 0x4c, 0x80, 0xed, 0x16, 0x92, 0x75, 0x43, 0x23, 0x47, 0xf5, 0x97, 0x44, 0x93, 0x98,
    0x62, 0x25, 0xac, 0x28, 0x4c, 0xc3, 0xb3, 0xdc, 0x0a, 0xd1, 0x06, 0x41, 0x45, 0x72, 0x43, 0x01, 0x00, 0x00, 0x03, 0x5a, 0x24, 0x9b,
    0x2f, 0xb4, 0xf1, 0x43, 0x53, 0x10, 0x1c, 0x69, 0x69, 0xf3, 0xb1, 0x10, 0xe4, 0xd9, 0x1d, 0xc1, 0xbd, 0x77, 0xa1, 0x05, 0x13, 0x76,
    0x6c, 0xc9, 0xe1, 0xef, 0xb2, 0x11, 0x3b, 0x01, 0x00, 0x00, 0x03, 0x5b, 0x00, 0xa5, 0x54, 0x1e, 0x94, 0x0c, 0xdf, 0xcf, 0x81, 0xf9,
    0xa3, 0x8d, 0x54, 0x43, 0xf6, 0x3c, 0x10, 0x0c, 0x9a, 0x35, 0xd4, 0xe7, 0x34, 0xad, 0x51, 0xab, 0xb1, 0x37, 0xcd, 0x55, 0xf1, 0x01,
    0x00, 0x00, 0x03, 0x5d, 0xba, 0xdd, 0x20, 0xff, 0xc3, 0x90, 0xfc, 0x18, 0x6d, 0x4b, 0x49, 0x25, 0x6e, 0x9b, 0xe1, 0x00, 0x01, 0xbf,
    0x55, 0x8f, 0xc4, 0x84, 0x4e, 0xbb, 0x1c, 0x3d, 0x90, 0x35, 0x9e, 0xeb, 0x2c, 0x01, 0x00, 0x00, 0x03, 0x6c, 0xb9, 0xc7, 0xf7, 0x05,
    0xb5, 0xcc, 0xc5, 0x71, 0x37, 0x2b, 0x32, 0xba, 0xb4, 0xb0, 0xb5, 0x71, 0x2b, 0x4d, 0x98, 0x40, 0x9e, 0x54, 0x5d, 0xff, 0xbe, 0xd7,
    0xa5, 0x49, 0x61, 0x2b, 0x85, 0x01, 0x00, 0x00, 0x03, 0x7b, 0x26, 0x67, 0x17, 0x11, 0x23, 0xad, 0xff, 0x6f, 0x45, 0xb7, 0x53, 0x44,
    0xdd, 0xf1, 0xc5, 0xf5, 0x41, 0x0b, 0x88, 0xb2, 0x69, 0x90, 0x5b, 0x58, 0xd5, 0xfc, 0xe7, 0xb0, 0x90, 0x62, 0xef, 0x01, 0x00, 0x00,
    0x03, 0x7b, 0x92, 0xab, 0x2a, 0x85, 0x91, 0xf3, 0xa6, 0x8d, 0xc9, 0xff, 0x56, 0xb8, 0xfc, 0xdc, 0xbe, 0xb8, 0xb9, 0xc9, 0x3c, 0x8e,
    0x71, 0xb2, 0x02, 0x76, 0x48, 0x0b, 0x4c, 0xe2, 0xf4, 0x08, 0x1b, 0x01, 0x00, 0x00, 0x03, 0x8e, 0x93, 0xf4, 0xad, 0x35, 0x3a, 0x21,
    0x9f, 0x5b, 0x7a, 0x71, 0x32, 0xda, 0x76, 0xaa, 0x34, 0xda, 0x1a, 0xec, 0xf9, 0xa1, 0xff, 0x8a, 0x3a, 0x67, 0x8e, 0x2b, 0xa4, 0x71,
    0x8d, 0x78, 0x06, 0x01, 0x00, 0x00, 0x03, 0x90, 0x06, 0xda, 0x6b, 0xaf, 0x3a, 0x6e, 0xe8, 0x92, 0x34, 0xcd, 0x31, 0xd9, 0x94, 0x6b,
    0x02, 0x01, 0xaf, 0x95, 0x63, 0xed, 0x22, 0x79, 0xcf, 0xd1, 0xee, 0xf8, 0x63, 0x92, 0xc2, 0x9c, 0xc8, 0x01, 0x00, 0x00, 0x03, 0x98,
    0x1c, 0x01, 0x95, 0x92, 0x11, 0x78, 0x80, 0x3f, 0xfa, 0xac, 0x66, 0x64, 0xfe, 0x6b, 0x32, 0x62, 0x9e, 0x9e, 0xa5, 0x1d, 0xca, 0xf1,
    0x18, 0xcb, 0xb8, 0x7d, 0x66, 0xc6, 0x26, 0xf9, 0x88, 0x01, 0x00, 0x00, 0x03, 0xa4, 0xb8, 0xe7, 0x48, 0x1a, 0xed, 0xb8, 0xc9, 0xaf,
    0x42, 0xc2, 0xe2, 0x91, 0x68, 0xf1, 0x80, 0x64, 0x56, 0x01, 0x03, 0x16, 0x1b, 0x53, 0xe4, 0x71, 0xf5, 0xce, 0x38, 0xe2, 0xa4, 0x4c,
    0xba, 0x01, 0x00, 0x00, 0x03, 0xa9, 0x46, 0xca, 0x86, 0xf0, 0x63, 0xf2, 0xe2, 0x58, 0x08, 0xa2, 0x53, 0x37, 0xae, 0xc0, 0xa1, 0xdf,
    0x21, 0x7f, 0x81, 0x6d, 0xc3, 0xe3, 0xee, 0x76, 0xd8, 0x3c, 0x74, 0x03, 0x27, 0x4d, 0x2e, 0x01, 0x00, 0x00, 0x03, 0xac, 0x88, 0xca,
    0xc3, 0xfb, 0x9c, 0x6c, 0x86, 0x51, 0xd0, 0x37, 0xfe, 0xe1, 0x35, 0xac, 0x27, 0x44, 0x4f, 0x15, 0x4c, 0xb9, 0x28, 0x89, 0xfc, 0x4f,
    0xeb, 0x7e, 0x6d, 0xd4, 0xd8, 0x6c, 0x5a, 0x01, 0x00, 0x00, 0x03, 0xb2, 0x5a, 0x9d, 0xd8, 0x1e, 0x16, 0x16, 0xd6, 0x81, 0x65, 0xe0,
    0xe6, 0xa1, 0xcd, 0x48, 0xd8, 0x87, 0x09, 0x2c, 0xcc, 0x39, 0xa0, 0x5f, 0xe0, 0x53, 0xca, 0x18, 0xc1, 0xf4, 0x55, 0xbd, 0x4b, 0x01,
    0x00, 0x00, 0x03, 0xb6, 0x1f, 0xfc, 0x56, 0x3f, 0x13, 0x2d, 0xcb, 0xaa, 0xcc, 0x2e, 0x2a, 0x91, 0x10, 0x24, 0xad, 0x1a, 0x83, 0x67,
    0xe1, 0x3b, 0xb9, 0x6d, 0x2d, 0x8c, 0x3a, 0xeb, 0xd6, 0xa6, 0x74, 0xef, 0x47, 0x01, 0x00, 0x00, 0x03, 0xbe, 0xea, 0xcd, 0xd1, 0xed,
    0x1e, 0x39, 0x81, 0x28, 0x1a, 0x41, 0x88, 0xcd, 0xe1, 0xaa, 0x0d, 0xb3, 0x6e, 0x75, 0xec, 0x90, 0xaa, 0x93, 0xdd, 0x44, 0x9c, 0xd9,
    0x64, 0x89, 0xb8, 0x45, 0xd6, 0x01, 0x00, 0x00, 0x03, 0xd2, 0x33, 0x06, 0x55, 0x52, 0x5a, 0x07, 0x61, 0x1b, 0xdb, 0x0e, 0xea, 0x92,
    0x63, 0xb1, 0x34, 0xdd, 0x0a, 0x8f, 0x07, 0x8b, 0x2a, 0xa3, 0x08, 0x8d, 0xbd, 0x0d, 0x87, 0x14, 0xca, 0xdc, 0x70, 0x01, 0x00, 0x00,
    0x03, 0xd4, 0x8b, 0x08, 0xa0, 0xb3, 0x22, 0xd8, 0x79, 0xa9, 0x7c, 0x5a, 0xb5, 0x5f, 0x40, 0x7b, 0xc4, 0xd7, 0x9d, 0x04, 0x80, 0xab,
    0x1e, 0x2b, 0xee, 0x12, 0x98, 0xb0, 0x8c, 0x23, 0x29, 0xcb, 0x3f, 0x01, 0x00, 0x00, 0x03, 0xd4, 0x8b, 0xf4, 0x09, 0xa3, 0xf7, 0x9a,
    0xdf, 0x5b, 0x93, 0xdc, 0x35, 0xff, 0x41, 0x83, 0xee, 0x4e, 0x18, 0x84, 0x41, 0x8b, 0x2b, 0x4c, 0x00, 0x67, 0x3e, 0xe1, 0xcb, 0xff,
    0x2d, 0xe5, 0x2f, 0x01, 0x00, 0x00, 0x03, 0xda, 0x86, 0xb7, 0xa3, 0xe5, 0xa4, 0xcd, 0xa4, 0x68, 0xea, 0xb9, 0x71, 0x40, 0xa1, 0xcf,
    0xe8, 0xdd, 0xba, 0x24, 0x37, 0x9f, 0xbe, 0xb5, 0x2f, 0x82, 0x93, 0xb9, 0x45, 0x27, 0xd4, 0x60, 0xc6, 0x01, 0x00, 0x00, 0x03, 0xdd,
    0x98, 0x7d, 0x4d, 0x83, 0xbc, 0x06, 0x4e, 0xb1, 0x0e, 0xa5, 0xdc, 0x22, 0x94, 0x45, 0xcf, 0xa1, 0xe8, 0x2d, 0xe6, 0xaa, 0xa0, 0x5f,
    0x60, 0x1e, 0xf4, 0xdb, 0xa5, 0xb1, 0x62, 0xcb, 0x37, 0x01, 0x00, 0x00, 0x03, 0xe8, 0xf9, 0xc5, 0x63, 0x2a, 0x5f, 0x35, 0x45, 0x23,
    0x85, 0xbb, 0x18, 0xb9, 0x9a, 0x41, 0x10, 0x89, 0xeb, 0xdd, 0x50, 0x1f, 0x48, 0xdb, 0xc5, 0xb0, 0x6a, 0xd0, 0x2f, 0x53, 0x6d, 0x43,
    0x5f, 0x01, 0x00, 0x00, 0x03, 0xea, 0xc6, 0xcb, 0xca, 0x53, 0xc3, 0x2d, 0xab, 0xb6, 0x2d, 0x98, 0xaa, 0x27, 0xb6, 0xe0, 0x9c, 0xc8,
    0x9d, 0xfb, 0x0e, 0x33, 0x1a, 0xb5, 0x9d, 0x7e, 0x59, 0x05, 0xa7, 0x34, 0x56, 0x1d, 0xde, 0x01, 0x00, 0x00, 0x03, 0xf1, 0xf3, 0xb7,
    0x84, 0x67, 0x18, 0x0b, 0x39, 0x06, 0xdb, 0x52, 0x58, 0x0f, 0x28, 0x31, 0xe8, 0x89, 0xd1, 0x21, 0x27, 0xe5, 0xfb, 0xcf, 0xb7, 0xba,
    0xac, 0x6a, 0x65, 0x19, 0x19, 0x49, 0xa6, 0x01, 0x00, 0x00, 0x03, 0xf7, 0x58, 0x66, 0x72, 0xdb, 0x27, 0x18, 0x9c, 0x8b, 0x5d, 0x8d,
    0xe7, 0xbd, 0x92, 0xaf, 0x25, 0x33, 0x29, 0xf9, 0x3a, 0x36, 0x0e, 0xb4, 0xc7, 0xe0, 0x88, 0xbc, 0x63, 0x6f, 0x68, 0x7e, 0x47, 0x01,
    0x00, 0x00, 0x03, 0xf9, 0x38, 0x6b, 0xc8, 0xa2, 0xc3, 0xa2, 0x94, 0x95, 0x89, 0x09, 0xbc, 0x21, 0xc8, 0xf6, 0x78, 0x3a, 0xa4, 0xa6,
    0xcc, 0xa9, 0x81, 0x58, 0x60, 0xb0, 0x00, 0x0e, 0xc2, 0x1f, 0x28, 0x4c, 0x3b, 0x01, 0x00, 0x00, 0x03, 0xfa, 0x6d, 0xb5, 0xfe, 0x2d,
    0xb9, 0x15, 0x03, 0x2a, 0xfa, 0xeb, 0xfc, 0x3c, 0xc0, 0x6d, 0x61, 0xdd, 0x7d, 0x9b, 0x39, 0x4b, 0xc9, 0x28, 0xf0, 0xa8, 0x3e, 0x03,
    0x27, 0x10, 0x62, 0x5f, 0x1d, 0x01, 0x00, 0x00, 0x03, 0xff, 0xa9, 0x72, 0x98, 0xdb, 0x6f, 0xd3, 0xce, 0x47, 0x9d, 0xcf, 0x27, 0x1d,
    0x87, 0xe3, 0x76, 0x28, 0x46, 0xf1, 0x3a, 0xef, 0xc2, 0xc2, 0x35, 0xb7, 0xf5, 0xa5, 0x41, 0xfe, 0x2f, 0xea, 0x69, 0x01, 0x00, 0x00,
    0x00,
};

extern "C" void* memcpy(void* __restrict dest, const void* __restrict src, size_t size) {
    auto d = reinterpret_cast<char*>(dest);
    auto s = reinterpret_cast<const char*>(src);
    while (size--)
        *d++ = *s++;
    return dest;
}

extern "C" void* memmove(void* dest, const void* src, size_t size) {
    auto d = reinterpret_cast<char*>(dest);
    auto s = reinterpret_cast<const char*>(src);
    if (d < s) {
        while (size--)
            *d++ = *s++;
    } else {
        for (size_t p = 0; p < size; ++p)
            d[size - p - 1] = s[size - p - 1];
    }
    return dest;
}

extern "C" void* memset(void* dest, int v, size_t size) {
    auto d = reinterpret_cast<char*>(dest);
    while (size--)
        *d++ = v;
    return dest;
}

extern "C" void print_range(const char* begin, const char* end);
extern "C" void prints(const char* cstr) { print_range(cstr, cstr + strlen(cstr)); }
extern "C" void prints_l(const char* cstr, uint32_t len) { print_range(cstr, cstr + len); }

extern "C" void printn(uint64_t n) {
    char buffer[13];
    auto end = name{n}.write_as_string(buffer, buffer + sizeof(buffer));
    print_range(buffer, end);
}

extern "C" void printui(uint64_t value) {
    char  s[21];
    char* ch = s;
    do {
        *ch++ = '0' + (value % 10);
        value /= 10;
    } while (value);
    std::reverse(s, ch);
    *ch = 0;
    print_range(s, ch);
}

extern "C" void printi(int64_t value) {
    if (value < 0) {
        prints("-");
        printui(-value);
    } else
        printui(value);
}

// todo: remove this
template <typename T>
struct serial_wrapper {
    T value{};
};

// todo: remove this
template <typename DataStream>
DataStream& operator<<(DataStream& ds, const serial_wrapper<checksum256>& obj) {
    eosio_assert(false, "oops");
    return ds;
}

// todo: remove this
template <typename DataStream>
DataStream& operator>>(DataStream& ds, serial_wrapper<checksum256>& obj) {
    ds.read(reinterpret_cast<char*>(obj.value.data()), obj.value.num_words() * sizeof(checksum256::word_t));
    return ds;
}

// todo: don't return static storage
// todo: replace with eosio functions when linker is improved
const char* asset_to_string(const asset& v) {
    static char result[1000];
    auto        pos = result;
    uint64_t    amount;
    if (v.amount < 0)
        amount = -v.amount;
    else
        amount = v.amount;
    uint8_t precision = v.symbol.precision();
    if (precision) {
        while (precision--) {
            *pos++ = '0' + amount % 10;
            amount /= 10;
        }
        *pos++ = '.';
    }
    do {
        *pos++ = '0' + amount % 10;
        amount /= 10;
    } while (amount);
    if (v.amount < 0)
        *pos++ = '-';
    *pos++ = ' ';

    auto sc = v.symbol.code().raw();
    while (sc > 0) {
        *pos++ = char(sc & 0xFF);
        sc >>= 8;
    }

    *pos++ = 0;
    return result;
}

namespace eosio {
template <typename Stream>
inline datastream<Stream>& operator>>(datastream<Stream>& ds, datastream<Stream>& dest) {
    unsigned_int size;
    ds >> size;
    dest = datastream<Stream>{ds.pos(), size};
    ds.skip(size);
    return ds;
}
} // namespace eosio

typedef void* cb_alloc_fn(void* cb_alloc_data, size_t size);

struct contract_row {
    uint32_t                block_index = 0;
    bool                    present     = false;
    name                    code;
    uint64_t                scope;
    name                    table;
    uint64_t                primary_key = 0;
    name                    payer;
    datastream<const char*> value{nullptr, 0};
};

struct action_trace {
    uint32_t                    block_index             = {};
    serial_wrapper<checksum256> transaction_id          = {};
    uint32_t                    action_index            = {};
    uint32_t                    parent_action_index     = {};
    datastream<const char*>     transaction_status      = {nullptr, 0}; // todo: enum
    eosio::name                 receipt_receiver        = {};
    serial_wrapper<checksum256> receipt_act_digest      = {};
    uint64_t                    receipt_global_sequence = {};
    uint64_t                    receipt_recv_sequence   = {};
    unsigned_int                receipt_code_sequence   = {};
    unsigned_int                receipt_abi_sequence    = {};
    eosio::name                 account                 = {};
    eosio::name                 name                    = {};
    datastream<const char*>     data                    = {nullptr, 0};
    bool                        context_free            = {};
    int64_t                     elapsed                 = {};
    datastream<const char*>     console                 = {nullptr, 0}; // todo: string
    datastream<const char*>     except                  = {nullptr, 0}; // todo: string

    EOSLIB_SERIALIZE(
        action_trace, (block_index)(transaction_id)(action_index)(parent_action_index)(transaction_status)(receipt_receiver)(
                          receipt_act_digest)(receipt_global_sequence)(receipt_recv_sequence)(receipt_code_sequence)(receipt_abi_sequence)(
                          account)(name)(data)(context_free)(elapsed)(console)(except))
};

struct code_table_pk_scope {
    name     code;
    name     table;
    uint64_t primary_key = 0;
    uint64_t scope;
};

struct code_table_scope_pk {
    name     code;
    name     table;
    uint64_t scope;
    uint64_t primary_key = 0;
};

struct scope_table_pk_code {
    uint64_t scope;
    name     table;
    uint64_t primary_key = 0;
    name     code;
};

struct receiver_name_account {
    eosio::name receipt_receiver = {};
    eosio::name name             = {};
    eosio::name account          = {};
};

struct query_contract_row_range_code_table_pk_scope {
    uint32_t            max_block_index = 0;
    code_table_pk_scope first;
    code_table_pk_scope last;
    uint32_t            max_results = 1;
};

struct query_contract_row_range_code_table_scope_pk {
    uint32_t            max_block_index = 0;
    code_table_scope_pk first;
    code_table_scope_pk last;
    uint32_t            max_results = 1;
};

struct query_contract_row_range_scope_table_pk_code {
    uint32_t            max_block_index = 0;
    scope_table_pk_code first;
    scope_table_pk_code last;
    uint32_t            max_results = 1;
};

struct query_action_trace_range_receiver_name_account {
    uint32_t              max_block_index = 0;
    receiver_name_account first           = {};
    receiver_name_account last            = {};
    uint32_t              max_results     = 1;
};

using query = std::variant<
    query_contract_row_range_code_table_pk_scope, query_contract_row_range_code_table_scope_pk,
    query_contract_row_range_scope_table_pk_code, query_action_trace_range_receiver_name_account>;

extern "C" void exec_query(void* req_begin, void* req_end, void* cb_alloc_data, cb_alloc_fn* cb_alloc);

template <typename Alloc_fn>
inline void exec_query(const query& req, Alloc_fn alloc_fn) {
    auto req_data = pack(req);
    exec_query(req_data.data(), req_data.data() + req_data.size(), &alloc_fn, [](void* cb_alloc_data, size_t size) -> void* { //
        return (*reinterpret_cast<Alloc_fn*>(cb_alloc_data))(size);
    });
}

inline std::vector<char> exec_query(const query& req) {
    std::vector<char> result;
    exec_query(req, [&result](size_t size) {
        result.resize(size);
        return result.data();
    });
    return result;
}

template <typename result, typename F>
bool for_each_query_result(const std::vector<char>& bytes, F f) {
    datastream<const char*> ds(bytes.data(), bytes.size());
    unsigned_int            size;
    ds >> size;
    for (uint32_t i = 0; i < size.value; ++i) {
        result r;
        ds >> r;
        if (!f(r))
            return false;
    }
    return true;
}

template <typename payload, typename F>
bool for_each_contract_row(const std::vector<char>& bytes, F f) {
    return for_each_query_result<contract_row>(bytes, [&](contract_row& row) {
        payload p;
        if (row.present && row.value.remaining()) {
            // todo: don't assert if serialization fails
            row.value >> p;
            if (!f(row, &p))
                return false;
        } else {
            if (!f(row, nullptr))
                return false;
        }
        return true;
    });
}

struct newaccount {
    eosio::name creator;
    eosio::name name;
    // authority owner;
    // authority active;
};

void balances_for_multiple_accounts(
    uint32_t max_block_index, name code, symbol_code sc, name first_account, name last_account, uint32_t max_results) {
    print("    balances_for_multiple_accounts\n");
    auto s = exec_query(query_contract_row_range_code_table_pk_scope{
        .max_block_index = max_block_index,
        .first =
            {
                .code        = code,
                .table       = "accounts"_n,
                .primary_key = sc.raw(),
                .scope       = first_account.value,
            },
        .last =
            {
                .code        = code,
                .table       = "accounts"_n,
                .primary_key = sc.raw(),
                .scope       = last_account.value,
            },
        .max_results = max_results,
    });
    for_each_contract_row<asset>(s, [&](contract_row& r, asset* a) {
        print("        ", r.block_index, " ", r.present, " ", r.code, " ", name{r.scope}, " ", r.payer);
        if (r.present && a)
            print(" ", asset_to_string(*a));
        print("\n");
        return true;
    });
    print("\n");
}

void proposals(uint32_t max_block_index, name first_account, name first_prop, name last_account, name last_prop, uint32_t max_results) {
    print("    proposals\n");
    auto s = exec_query(query_contract_row_range_code_table_scope_pk{
        .max_block_index = max_block_index,
        .first =
            {
                .code        = "eosio.msig"_n,
                .table       = "proposal"_n,
                .scope       = first_account.value,
                .primary_key = first_prop.value,
            },
        .last =
            {
                .code        = "eosio.msig"_n,
                .table       = "proposal"_n,
                .scope       = last_account.value,
                .primary_key = last_prop.value,
            },
        .max_results = max_results,
    });
    for_each_query_result<contract_row>(s, [&](contract_row& r) {
        print("        ", r.block_index, " ", r.present, " ", name{r.scope}, " ", name{r.primary_key});
        if (r.present)
            print(" ", r.value.remaining(), " bytes");
        print("\n");
        return true;
    });
    print("\n");
}

void balances_for_multiple_tokens(uint32_t max_block_index, name account, uint32_t max_results) {
    print("    balances_for_multiple_tokens\n");
    auto s = exec_query(query_contract_row_range_scope_table_pk_code{
        .max_block_index = max_block_index,
        .first =
            {
                .scope       = account.value,
                .table       = "accounts"_n,
                .primary_key = 0,
                .code        = name{0},
            },
        .last =
            {
                .scope       = account.value,
                .table       = "accounts"_n,
                .primary_key = ~uint64_t(0),
                .code        = name{~uint64_t(0)},
            },
        .max_results = max_results,
    });
    for_each_query_result<contract_row>(s, [&](contract_row& r) {
        if (!r.present || r.value.remaining() != 16)
            return true;
        asset a;
        r.value >> a;
        if (!a.is_valid() || a.symbol.code().raw() != r.primary_key)
            return true;
        print("        ", name{r.scope}, " ", r.code, " ", asset_to_string(a), "\n");
        return true;
    });
    print("\n");
}

void creators(uint32_t max_block_index, uint32_t max_results) {
    print("    creators\n");
    auto s = exec_query(query_action_trace_range_receiver_name_account{
        .max_block_index = max_block_index,
        .first =
            {
                .receipt_receiver = "eosio"_n,
                .name             = "newaccount"_n,
                .account          = "eosio"_n,
            },
        .last =
            {
                .receipt_receiver = "eosio"_n,
                .name             = "newaccount"_n,
                .account          = "eosio"_n,
            },
        .max_results = max_results,
    });
    for_each_query_result<action_trace>(s, [&](action_trace& t) {
        char status[20];
        auto size = min(t.transaction_status.remaining(), sizeof(status) - 1);
        t.transaction_status.read(status, size);
        status[size] = 0;
        if (strcmp(status, "executed"))
            return true;
        newaccount na;
        t.data >> na;
        print("        ", na.creator, ", ", na.name, "\n");
        return true;
    });
    print("\n");
}

struct html {
    std::vector<char> v;

    html() = default;

    html(std::string_view sv)
        : v(sv.begin(), sv.end()) {}

    template <int n>
    html(const char (&s)[n])
        : v(s, s + n) {}

    html& operator+=(const html& src) {
        v.insert(v.end(), src.v.begin(), src.v.end());
        return *this;
    }

    html replace(std::string_view pattern, std::string_view replacement) const {
        html  result;
        auto* p = v.data();
        auto* e = p + v.size();
        while (p != e) {
            if (e - p >= pattern.size() && !strncmp(p, pattern.begin(), pattern.size())) {
                result.v.insert(result.v.end(), replacement.begin(), replacement.end());
                p += pattern.size();
            } else
                result.v.push_back(*p++);
        }
        return result;
    }

    html replace(std::string_view pattern, const html& replacement) const {
        return replace(pattern, std::string_view{replacement.v.data(), replacement.v.size()});
    }

    html replace(std::string_view pattern, name n) const {
        char s[13];
        auto e = n.write_as_string(s, s + sizeof(s));
        return replace(pattern, std::string_view{s, size_t(e - s)});
    }

    html replace(std::string_view pattern, uint32_t value) const {
        char  s[21];
        char* ch = s;
        do {
            *ch++ = '0' + (value % 10);
            value /= 10;
        } while (value);
        std::reverse(s, ch);
        return replace(pattern, std::string_view{s, size_t(ch - s)});
    }

    html replace(std::string_view pattern, uint16_t value) const { return replace(pattern, uint32_t(value)); }

    template <typename T>
    html replace(std::string_view pattern, const T& obj) const {
        return replace(pattern, to_html(obj));
    }
};

html operator+(std::string_view lhs, const html& rhs) {
    html result(lhs);
    result += rhs;
    return result;
}

template <typename T>
html to_html(const std::vector<T>& v) {
    html result;
    for (auto& x : v)
        result += to_html(x);
    return result;
}

inline constexpr char base58_chars[] = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";

inline constexpr auto create_base58_map() {
    std::array<int8_t, 256> base58_map{{0}};
    for (unsigned i = 0; i < base58_map.size(); ++i)
        base58_map[i] = -1;
    for (unsigned i = 0; i < sizeof(base58_chars); ++i)
        base58_map[base58_chars[i]] = i;
    return base58_map;
}
inline constexpr auto base58_map = create_base58_map();

template <auto size>
html binary_to_base58(const std::array<char, size>& bin) {
    html result;
    for (auto byte : bin) {
        int carry = byte;
        for (auto& result_digit : result.v) {
            int x        = (base58_map[result_digit] << 8) + carry;
            result_digit = base58_chars[x % 58];
            carry        = x / 58;
        }
        while (carry) {
            result.v.push_back(base58_chars[carry % 58]);
            carry = carry / 58;
        }
    }
    for (auto byte : bin)
        if (byte)
            break;
        else
            result.v.push_back('1');
    std::reverse(result.v.begin(), result.v.end());
    return result;
}

template <size_t size, int suffix_size>
inline auto digest_suffix_ripemd160(const std::array<char, size>& data, const char (&suffix)[suffix_size]) {
    std::array<unsigned char, 20>       digest;
    internal_ripemd160::ripemd160_state self;
    internal_ripemd160::ripemd160_init(&self);
    internal_ripemd160::ripemd160_update(&self, (uint8_t*)data.data(), data.size());
    internal_ripemd160::ripemd160_update(&self, (uint8_t*)suffix, suffix_size - 1);
    if (!internal_ripemd160::ripemd160_digest(&self, digest.data()))
        ; // !!! throw error("ripemd failed");
    return digest;
}

template <typename Key, int suffix_size>
html key_to_string(const Key& key, const char (&suffix)[suffix_size], std::string_view prefix) {
    // todo: fix digest
    // static constexpr auto         size        = std::tuple_size_v<decltype(Key::data)>;
    // auto                          ripe_digest = digest_suffix_ripemd160(key.data, suffix);
    // std::array<uint8_t, size + 4> whole;
    // memcpy(whole.data(), key.data.data(), size);
    // memcpy(whole.data() + size, ripe_digest.data(), 4);
    return prefix + binary_to_base58(key.data);
}

namespace eosio {

enum class key_type : uint8_t {
    k1 = 0,
    r1 = 1,
};

html to_html(const public_key& key) {
    if (key.type.value == (uint8_t)key_type::k1) {
        return key_to_string(key, "K1", "PUB_K1_");
    } else if (key.type.value == (uint8_t)key_type::r1) {
        return key_to_string(key, "R1", "PUB_R1_");
    } else {
        return "unrecognized public key format";
    }
}

} // namespace eosio

#include "updateauth.hpp"

void bar() {
    datastream<const char*> ds{(const char*)foo, sizeof(foo)};
    updateauth              action_data;
    ds >> action_data;
    auto s = to_html(std::move(action_data));
    print_range(s.v.data(), s.v.data() + s.v.size());
}

extern "C" void startup() {
    print("\nstart wasm\n");
    creators(30000000, 20);
    balances_for_multiple_accounts(3000000, "eosio.token"_n, symbol_code{"EOS"}, "eosio"_n, "eosio.zzzzzz"_n, 100);
    proposals(30000000, "h"_n, name{0}, "hzzzzzzzzzzz"_n, name{~uint64_t(0)}, 20);
    balances_for_multiple_tokens(30000000, "eosio"_n, 100);
    // bar();
    print("end wasm\n\n");
}
